les étapes afin de réussir : Comprendre le binaire donné
disas n
    0x080484c2 <+0>:    push   %ebp
    0x080484c3 <+1>:    mov    %esp,%ebp
    0x080484c5 <+3>:    sub    $0x218,%esp
    0x080484cb <+9>:    mov    0x8049848,%eax
    0x080484d0 <+14>:    mov    %eax,0x8(%esp)
    0x080484d4 <+18>:    movl   $0x200,0x4(%esp)
    0x080484dc <+26>:    lea    -0x208(%ebp),%eax
    0x080484e2 <+32>:    mov    %eax,(%esp)
    0x080484e5 <+35>:    call   0x80483a0 <fgets@plt> /// protection buffer overflow
    0x080484ea <+40>:    lea    -0x208(%ebp),%eax
    0x080484f0 <+46>:    mov    %eax,(%esp)
    0x080484f3 <+49>:    call   0x8048380 <printf@plt>  /// un printf sur l'entrée standard (Format string attack)
    0x080484f8 <+54>:    movl   $0x1,(%esp)
    0x080484ff <+61>:    call   -> 0x80483d0 <- <exit@plt> /// exit

disas o
    0x080484a4 <+0>:    push   %ebp
    0x080484a5 <+1>:    mov    %esp,%ebp
    0x080484a7 <+3>:    sub    $0x18,%esp
    0x080484aa <+6>:    movl   $0x80485f0,(%esp)
    0x080484b1 <+13>:    call   0x80483b0 <system@plt> /// la fonction system recherché
    0x080484b6 <+18>:    movl   $0x1,(%esp)
    0x080484bd <+25>:    call   0x8048390 <_exit@plt>

   On va chercher à changer l'adresse de exit par celle de la fonction o

   on récupère l'adresse de o avec gdb : x o : `0x80484a4` converti en décimal 134513828
   et l'adresse de exit
   disas 0x80483d0
   0x080483d0 <+0>:	jmp    *0x8049838

   il nous faut connaitre la place de l'adresse de exit grace à la premiere command

   et grâce à ça nous pouvons consitué notre deuxieme command pour finir lancer notre exploit
